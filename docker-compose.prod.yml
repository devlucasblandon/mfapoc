version: '3.8'

services:
  # POC 3 Security API
  poc3-api:
    build:
      context: .
      dockerfile: Dockerfile.poc3.prod
    container_name: poc3-security-api
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://poc3_user:${DB_PASSWORD}@postgres:5432/poc3_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - poc3-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: poc3-postgres
    environment:
      - POSTGRES_DB=poc3_db
      - POSTGRES_USER=poc3_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./poc1_inventory/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - poc3-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: poc3-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - poc3-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: poc3-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - poc3-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: poc3-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - poc3-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  poc3-network:
    driver: bridge
