#!/bin/bash

# Script de pruebas de regresi√≥n para POC3 Security
# Ejecuta un conjunto completo de pruebas para verificar que todas las funcionalidades
# de seguridad funcionan correctamente despu√©s de cambios

set -e

echo "üîí Iniciando pruebas de regresi√≥n para POC3 Security..."
echo "=================================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Funci√≥n para ejecutar una prueba y contar resultados
run_test() {
    local test_name="$1"
    local command="$2"
    local expected_exit_code="${3:-0}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    echo -e "${BLUE}üß™ Ejecutando: $test_name${NC}"
    
    if eval "$command" > /dev/null 2>&1; then
        if [ $? -eq $expected_exit_code ]; then
            echo -e "${GREEN}‚úÖ PASSED: $test_name${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}‚ùå FAILED: $test_name (c√≥digo de salida incorrecto)${NC}"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    else
        if [ $? -eq $expected_exit_code ]; then
            echo -e "${GREEN}‚úÖ PASSED: $test_name${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "${RED}‚ùå FAILED: $test_name${NC}"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    fi
    echo ""
}

# Funci√≥n para verificar que el POC3 est√© ejecut√°ndose
check_poc3_running() {
    echo -e "${YELLOW}üîç Verificando que POC3 est√© ejecut√°ndose...${NC}"
    
    if curl -s http://localhost:8083/customers/nonexistent@test.com -H "x-mfa: true" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ POC3 est√° ejecut√°ndose correctamente${NC}"
        return 0
    else
        echo -e "${RED}‚ùå POC3 no est√° ejecut√°ndose en http://localhost:8083${NC}"
        echo -e "${YELLOW}üí° Ejecuta 'make poc3' primero${NC}"
        return 1
    fi
}

# Funci√≥n para limpiar datos de prueba
cleanup_test_data() {
    echo -e "${YELLOW}üßπ Limpiando datos de prueba...${NC}"
    # En un entorno real, aqu√≠ limpiar√≠as los datos de prueba
    # Por simplicidad del POC, no implementamos limpieza autom√°tica
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
}

# Funci√≥n principal
main() {
    echo -e "${BLUE}üöÄ Iniciando suite de pruebas de regresi√≥n para POC3 Security${NC}"
    echo ""
    
    # Verificar que POC3 est√© ejecut√°ndose
    if ! check_poc3_running; then
        exit 1
    fi
    
    echo ""
    echo -e "${BLUE}üìã Ejecutando pruebas de regresi√≥n...${NC}"
    echo ""
    
    # Pruebas b√°sicas de funcionalidad
    echo -e "${YELLOW}üîß Pruebas b√°sicas de funcionalidad${NC}"
    echo "----------------------------------------"
    
    run_test "Crear cliente con MFA v√°lido" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"Test User\",\"email\":\"test@regression.com\",\"phone\":\"+57-300-0000\"}' | grep -q 'ok'"
    
    run_test "Leer cliente con MFA v√°lido" \
        "curl -s -X GET http://localhost:8083/customers/test@regression.com -H 'x-mfa: true' | grep -q 'Test User'"
    
    # Pruebas de seguridad
    echo -e "${YELLOW}üîí Pruebas de seguridad${NC}"
    echo "------------------------"
    
    run_test "Rechazar creaci√≥n sin MFA" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -d '{\"name\":\"Test\",\"email\":\"test2@regression.com\",\"phone\":\"+57-300-0001\"}' | grep -q 'MFA required'" \
        0
    
    run_test "Rechazar creaci√≥n con MFA falso" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: false' -d '{\"name\":\"Test\",\"email\":\"test3@regression.com\",\"phone\":\"+57-300-0002\"}' | grep -q 'MFA required'" \
        0
    
    run_test "Rechazar lectura sin MFA" \
        "curl -s -X GET http://localhost:8083/customers/test@regression.com | grep -q 'MFA required'" \
        0
    
    run_test "Rechazar lectura con MFA falso" \
        "curl -s -X GET http://localhost:8083/customers/test@regression.com -H 'x-mfa: false' | grep -q 'MFA required'" \
        0
    
    # Pruebas de validaci√≥n de datos
    echo -e "${YELLOW}üìù Pruebas de validaci√≥n de datos${NC}"
    echo "------------------------------------"
    
    run_test "Rechazar datos inv√°lidos" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"\",\"email\":\"invalid-email\",\"phone\":\"\"}' | grep -q 'validation error'" \
        0
    
    run_test "Rechazar campos faltantes" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"Test\"}' | grep -q 'validation error'" \
        0
    
    # Pruebas de encriptaci√≥n
    echo -e "${YELLOW}üîê Pruebas de encriptaci√≥n${NC}"
    echo "----------------------------"
    
    run_test "Verificar encriptaci√≥n de email" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"Encryption Test\",\"email\":\"encryption@regression.com\",\"phone\":\"+57-300-0003\"}' > /dev/null && curl -s -X GET http://localhost:8083/customers/encryption@regression.com -H 'x-mfa: true' | grep -q 'encryption@regression.com'"
    
    run_test "Verificar encriptaci√≥n de tel√©fono" \
        "curl -s -X GET http://localhost:8083/customers/encryption@regression.com -H 'x-mfa: true' | grep -q '+57-300-0003'"
    
    # Pruebas de casos l√≠mite
    echo -e "${YELLOW}‚ö° Pruebas de casos l√≠mite${NC}"
    echo "----------------------------"
    
    run_test "Manejar cliente inexistente" \
        "curl -s -X GET http://localhost:8083/customers/nonexistent@regression.com -H 'x-mfa: true' | grep -q 'not found'" \
        0
    
    run_test "Manejar caracteres especiales" \
        "curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"Jos√© Mar√≠a\",\"email\":\"jos√©@regression.com\",\"phone\":\"+57-300-0004\"}' | grep -q 'ok'"
    
    run_test "Leer cliente con caracteres especiales" \
        "curl -s -X GET http://localhost:8083/customers/jos√©@regression.com -H 'x-mfa: true' | grep -q 'Jos√© Mar√≠a'"
    
    # Pruebas de m√©todos HTTP
    echo -e "${YELLOW}üåê Pruebas de m√©todos HTTP${NC}"
    echo "----------------------------"
    
    run_test "Rechazar m√©todo PUT" \
        "curl -s -X PUT http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"Test\",\"email\":\"test@regression.com\",\"phone\":\"+57-300\"}' | grep -q 'Method Not Allowed'" \
        0
    
    run_test "Rechazar m√©todo DELETE" \
        "curl -s -X DELETE http://localhost:8083/customers/test@regression.com -H 'x-mfa: true' | grep -q 'Method Not Allowed'" \
        0
    
    # Pruebas de rendimiento b√°sicas
    echo -e "${YELLOW}‚ö° Pruebas de rendimiento b√°sicas${NC}"
    echo "------------------------------------"
    
    run_test "Tiempo de respuesta < 500ms" \
        "time curl -s -X POST http://localhost:8083/customers -H 'Content-Type: application/json' -H 'x-mfa: true' -d '{\"name\":\"Performance Test\",\"email\":\"perf@regression.com\",\"phone\":\"+57-300-0005\"}' | grep -q 'ok'"
    
    # Ejecutar pruebas con K6 si est√° disponible
    if command -v k6 &> /dev/null; then
        echo -e "${YELLOW}üöÄ Ejecutando pruebas de rendimiento con K6${NC}"
        echo "----------------------------------------"
        
        run_test "Pruebas de seguridad avanzadas con K6" \
            "k6 run scripts/k6_security_advanced.js --quiet"
        
        run_test "Pruebas de integraci√≥n con K6" \
            "k6 run scripts/k6_security_integration.js --quiet"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  K6 no est√° instalado, saltando pruebas de rendimiento${NC}"
    fi
    
    # Limpiar datos de prueba
    cleanup_test_data
    
    # Mostrar resumen
    echo ""
    echo -e "${BLUE}üìä Resumen de pruebas de regresi√≥n${NC}"
    echo "=================================="
    echo -e "Total de pruebas: ${BLUE}$TOTAL_TESTS${NC}"
    echo -e "Pruebas exitosas: ${GREEN}$PASSED_TESTS${NC}"
    echo -e "Pruebas fallidas: ${RED}$FAILED_TESTS${NC}"
    
    if [ $FAILED_TESTS -eq 0 ]; then
        echo -e "${GREEN}üéâ ¬°Todas las pruebas de regresi√≥n pasaron exitosamente!${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå $FAILED_TESTS pruebas fallaron. Revisa los logs arriba.${NC}"
        exit 1
    fi
}

# Ejecutar funci√≥n principal
main "$@"
